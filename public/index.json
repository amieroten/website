[{"authors":["admin"],"categories":null,"content":"Hello! My name is Amie Roten, and I am currently a Master\u0026rsquo;s student studying Computer Science at Oregon Health and Science University (OHSU) in Portland, OR. I originally hail from Central Illinois, and received my undergraduate degree in Linguistics from the University of Illinois at Urbana-Champaign. Prior to pursuing my degree in CS, I spent time working as a Research Assistant in a speech perception lab at the National Center for Rehabilitative Auditory Research at the Portland V.A., and became increasingly interested in how humans perceive sound, particularly speech, both in ideal circumstances and not-so-ideal. I\u0026rsquo;ve had the opportunity to extend this knowledge during my time at OHSU by applying it to automatic speech recognition problems, and am particularly fascinated by the overlap in human and machine \u0026lsquo;hearing\u0026rsquo;.\nI am also always ready and willing to discuss the subtle boundaries between cups and mugs. :)\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://vigilant-golick-64a677.netlify.app/author/amie-roten/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/amie-roten/","section":"authors","summary":"Hello! My name is Amie Roten, and I am currently a Master\u0026rsquo;s student studying Computer Science at Oregon Health and Science University (OHSU) in Portland, OR. I originally hail from Central Illinois, and received my undergraduate degree in Linguistics from the University of Illinois at Urbana-Champaign.","tags":null,"title":"Amie Roten","type":"authors"},{"authors":["吳恩達"],"categories":null,"content":"吳恩達 is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"da99cb196019cc5857b9b3e950397ca9","permalink":"https://vigilant-golick-64a677.netlify.app/author/%E5%90%B3%E6%81%A9%E9%81%94/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/%E5%90%B3%E6%81%A9%E9%81%94/","section":"authors","summary":"吳恩達 is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"吳恩達","type":"authors"},{"authors":null,"categories":null,"content":"\n\n\n\n","date":1591574400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591574400,"objectID":"b10ad2a66c3e75fb2dbe28e926742bdc","permalink":"https://vigilant-golick-64a677.netlify.app/post/pdx-flights/","publishdate":"2020-06-08T00:00:00Z","relpermalink":"/post/pdx-flights/","section":"post","summary":"","tags":null,"title":"All About the Population Pyramid!","type":"post"},{"authors":null,"categories":null,"content":" This post is an excerpt from a data visualization lab in which we experimented with use of colors in plots, both with positive and not-so-positive outcomes. In this post, I explore some good, bad, and greyscale color options, and briefly discuss the merits or faults of each. So, lets dive in!\nI know, I know, we’ve probably all seen enough coronavirus visualizations to last a lifetime, but here is one more! I was curious if the great toilet paper panic was a particularly American phenomenon, or if this was an anxiety that struck in the time of coronavirus regardless of nationality. To take a peek into this question, I used Google Trends (https://trends.google.com/) to gather data on search interest for coronavirus and toilet paper across three countries: China, Italy, and the United States, over the past 90 days. I figured this would make for an interesting color choice challenge, since we have three country variables, but each country has information on two different items, so we need to make a two-dimensional distinction.\n# Getting data. Note, the data came in as three separate .csv\u0026#39;s, # I did some preliminary coalescing outside of R to get one single dataset. tp_data \u0026lt;- read_csv(\u0026#39;data/tp_panic.csv\u0026#39;) # Adjusting the data types from simple character/string types. tp_data \u0026lt;- tp_data %\u0026gt;% mutate(Country = as.factor(Country)) %\u0026gt;% mutate(Day = as.Date(Day, \u0026quot;%m/%d/%y\u0026quot;)) %\u0026gt;% mutate(coronavirus = case_when(coronavirus == \u0026#39;\u0026lt;1\u0026#39; ~ 0.5, coronavirus != \u0026#39;\u0026lt;1\u0026#39; ~ as.numeric(coronavirus))) %\u0026gt;% mutate(toilet_paper = case_when(toilet_paper == \u0026#39;\u0026lt;1\u0026#39; ~ 0.5, toilet_paper != \u0026#39;\u0026lt;1\u0026#39; ~ as.numeric(toilet_paper))) glimpse(tp_data) ## Rows: 270 ## Columns: 4 ## $ Day \u0026lt;date\u0026gt; 2020-01-17, 2020-01-18, 2020-01-19, 2020-01-20, 2020-01… ## $ Country \u0026lt;fct\u0026gt; Italy, Italy, Italy, Italy, Italy, Italy, Italy, Italy, … ## $ toilet_paper \u0026lt;dbl\u0026gt; 0.5, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0… ## $ coronavirus \u0026lt;dbl\u0026gt; 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 2.0, 2.0, 3.0, 4.0, 4.0, 8… Version with good color Now, for the plotting, starting with a good color scheme!\nlibrary(cowplot) library(ggpubr) tp_plot_corona \u0026lt;- tp_data %\u0026gt;% ggplot(aes(Day, coronavirus, color = Country)) + geom_line() + scale_color_manual(values = c(\u0026#39;#FFC107\u0026#39;, \u0026#39;#C50049\u0026#39;, \u0026#39;#4897DC\u0026#39;)) + ylab(\u0026quot;Coronavirus\\nInterest\u0026quot;) + xlab(\u0026quot;\u0026quot;) + labs(title = \u0026quot;\u0026#39;Coronavirus\u0026#39; and \u0026#39;Toilet Paper\u0026#39;\\nGoogle Search Interest Levels in Early 2020\u0026quot;) + theme_minimal() tp_plot_tp \u0026lt;- tp_data %\u0026gt;% ggplot(aes(Day, toilet_paper, color = Country)) + geom_line(alpha = 0.5) + scale_color_manual(values = c(\u0026#39;#FFC107\u0026#39;, \u0026#39;#C50049\u0026#39;, \u0026#39;#4897DC\u0026#39;)) + ylab(\u0026quot;Toilet Paper\\nInterest\u0026quot;) + xlab(\u0026quot;Date\u0026quot;) + theme_minimal() tp_plot_full \u0026lt;- ggarrange(tp_plot_corona, tp_plot_tp, heights = c(2, 0.8), ncol = 1, nrow = 2, common.legend = TRUE, align = \u0026#39;v\u0026#39;, legend = \u0026quot;right\u0026quot;) tp_plot_full The function below will check to see how these color selections will be percieved by folks with various types of colorblindness:\n# Seems to work ok for CVD! cvd_grid(tp_plot_full) Alright, that took way longer than it should have! This dataset ended up being really tricky to work with, but I think it was a good exercise in both how to use color to improve interpretation of a plot, but also how color can make a plot much more confusing (as will be demonstrated in the third plot). Although the plot is relatively simple, just six plotted lines, as mentioned above the relationships between the data/lines is a bit more complex than just six discrete/qualitative variables. Therefore, selecting six discrete colors would not make sense, as it would likely obfuscate the fact that each country had two sets of information/two lines, one for their interest/search frequency in/of coronavirus, and one for toilet paper. Connecting the two sets by country by means of color felt like a successful choice, because you can easily look at the two sets of lines and realize that the blue lines (indicating data belonging to the U.S.) show peaks occuring around the same time frame, which was the whole point of the plot. I opted to make the lines for the two different opacities, in order to still make it clear that they were indeed measuring two different things, despite being connected, although this felt like a secondary point, since I opted to create a subplot for the toilet paper data. I didn’t just choose that to offset the toilet paper data, however, I do think that the two different sets of dependent variables could have shared a common y-axis and been distinguished from each other using color, however, since the values for toilet paper interest were so much lower than for coronavirus, and the point was not to compare absolute values of one search term to the other (instead to see if they peaked at the same time), creating subplots in order to emphazise the peaks in the T.P. data made more sense to me. So, my overall take away from the visualization is that, yes, it does look like there was some coronavirus-related toilet paper panic in the United States, but not so much for China or Italy. Priorities!\nFull disclosure, I don’t love the colors used in the plot above. I think they’re starting to veer into ugly territory, a little too saturated for my tastes. But, this blue/yellow/magenta palette seems to work best for colorblind viewers. I’ll need to keep playing around to find a color palette that I like that still works well for those with colorblindness.\n Version with greyscale tp_plot_corona \u0026lt;- tp_data %\u0026gt;% ggplot(aes(Day, coronavirus, color = Country)) + geom_line(linetype=\u0026quot;longdash\u0026quot;) + scale_color_manual(values = c(\u0026#39;#000000\u0026#39;, \u0026#39;#808080\u0026#39;, \u0026#39;#D3D3D3\u0026#39;)) + ylab(\u0026quot;Coronavirus\\nInterest\u0026quot;) + xlab(\u0026quot;\u0026quot;) + labs(title = \u0026quot;\u0026#39;Coronavirus\u0026#39; and \u0026#39;Toilet Paper\u0026#39;\\nGoogle Search Interest Levels in Early 2020\u0026quot;) + theme_minimal() tp_plot_tp \u0026lt;- tp_data %\u0026gt;% ggplot(aes(Day, toilet_paper, color = Country)) + geom_line(alpha = 1) + scale_color_manual(values = c(\u0026#39;#000000\u0026#39;, \u0026#39;#808080\u0026#39;, \u0026#39;#D3D3D3\u0026#39;)) + ylab(\u0026quot;Toilet Paper\\nInterest\u0026quot;) + xlab(\u0026quot;Date\u0026quot;) + theme_minimal() tp_plot_full \u0026lt;- ggarrange(tp_plot_corona, tp_plot_tp, heights = c(2, 0.8), ncol = 1, nrow = 2, common.legend = TRUE, align = \u0026#39;v\u0026#39;, legend = \u0026quot;right\u0026quot;) tp_plot_full Hmm, I’m not as psyched about this one as I was the colored version. Since there are only three “hues” in the original, to distinguish the countries, it was pretty straightforward to translate those into greyscale in a way that ensures they are distinguishable (although I suppose the lightest value is a bit light, I think it is acceptable at least on a screen…I’d have to do some print tests to make sure it was ok in other mediums). Increasing the alpha for the T.P. subplot no longer worked well to set it off, since that made the greys less distinguishable…the increased overlap in the data also didn’t help. I still wanted an easy way for the eye to differentiate the lines in the top plot versus the bottom, and although, in my opinion, complexity in a plot works best when it increases top-to-bottom, making the lines in the bottom plot dashed was just as difficult to visually parse as when they were made more transparent…so I opted to make the top plot lines dashed. I think the greyscale setup works, but it’s not terribly groundbreaking or beautiful.\n Version with dreadful color tp_long \u0026lt;- tp_data %\u0026gt;%pivot_longer(c(coronavirus, toilet_paper), names_to = \u0026quot;searchterms\u0026quot;, values_to = \u0026quot;interest\u0026quot;) %\u0026gt;% mutate(Country_SearchTerm = paste(Country, searchterms, sep = \u0026quot;: \u0026quot;), Country = NULL, searchterms = NULL) tp_plot_bad \u0026lt;- tp_long %\u0026gt;% ggplot(aes(Day, interest, color = Country_SearchTerm)) + geom_line() + scale_color_manual(values = c(\u0026#39;#800000\u0026#39;, \u0026#39;#FF9999\u0026#39;, \u0026#39;#000075\u0026#39;, \u0026#39;#6666DB\u0026#39;, \u0026#39;#469990\u0026#39;, \u0026#39;#ACFFF6\u0026#39;)) + ylab(\u0026quot;Search Interest\u0026quot;) + xlab(\u0026quot;\u0026quot;) + labs(title = \u0026quot;\u0026#39;Coronavirus\u0026#39; and \u0026#39;Toilet Paper\u0026#39;\\nGoogle Search Interest Levels in Early 2020\u0026quot;) + theme_minimal() tp_plot_bad Above was my original attempt at this plot…I had good intentions – my goal was still wanted to link the data together by country, but I ended up separating the coronavirus data from the T.P. data by lightening the colors 40% (according to https://www.hexcolortool.com/#479a90). Wow, this resulted in some ugly colors, and really difficult to see not only due to color, but also due to the relative values/heights of the datasets. Additionally, simply lightening the colors does not guarantee that the darker and lighter versions will feel intuitively cohesive, in fact, Italy and the U.S.’s colors begin to look like a spectrum when they are broken down into a light and dark version each (this can be observed best in the legend)…which is definitely not something that makes sense with this data. Also, this would not work well for a colorblind viewer…overall, this is a much less effective plot than the original, in my opinion!\nThere we have it, a short exploration of color choice in at least one type of line plot. Happy plotting!\n ","date":1591574400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591574400,"objectID":"7e7c021ce698abf4b48b590b4895737a","permalink":"https://vigilant-golick-64a677.netlify.app/post/tp-panic/","publishdate":"2020-06-08T00:00:00Z","relpermalink":"/post/tp-panic/","section":"post","summary":"This post is an excerpt from a data visualization lab in which we experimented with use of colors in plots, both with positive and not-so-positive outcomes. In this post, I explore some good, bad, and greyscale color options, and briefly discuss the merits or faults of each.","tags":null,"title":"Exploring Color with Coronavirus and Toilet Paper Data!","type":"post"},{"authors":null,"categories":null,"content":" For this post, I want to showcase my first interactive Shiny app, both the final product, and below it, the code used to generate the application. Although yes, this does use more COVID data, it was a very nice exploration of how to go about using Shiny, and I must say, after working with it, I think it’s a tool that I will start using often to explore large datasets!\nThe Application:  This application uses Kieran Healy’s covdata package, a comprehensive collection of data relating to the Coronavirus pandemic. I decided to use the Apple U.S. Mobility dataset, specifically the vehicular-travel data, to create the application above. The app includes three identical widgets that can be used to select three different states in order to compare and contrast the data. The widgets’ upper plots show the daily case increase, and the bottom plot shows the daily mobility index, that is how the day’s mobility data differs from the baseline taken in January. The yellow indicates a lower level of travel for that particular day, and the green indicates more travel. Please explore the application and see what interesting observations you can make!\n The Code: Below is the code used to generate the Shiny app\nThe first section is simply the data wrangling process, processing the raw data in the covdata package in order to get it in the correct format for use in the plots. This is not an inherant piece of creating a Shiny application, but it useful to demonstrate the process of reshaping and winnowing down the dataset for this particular use!\nlibrary(shiny) library(gt) library(covdata) library(ggpubr) library(tidyverse) case_data \u0026lt;- nytcovstate locations \u0026lt;- sort(unique(case_data$state)) mobility_data \u0026lt;- apple_mobility %\u0026gt;% filter(region %in% locations) %\u0026gt;% select(-alternative_name, -geo_type) %\u0026gt;% mutate(state = region, region = NULL) data \u0026lt;- full_join(mobility_data, case_data) %\u0026gt;% mutate(fips = replace_na(fips, 0), cases = replace_na(cases, 0), deaths = replace_na(deaths, 0)) %\u0026gt;% group_by(state) %\u0026gt;% arrange(date, .by_group = TRUE) %\u0026gt;% mutate(daily_cases = (cases - (lag(cases)))) %\u0026gt;% ungroup() %\u0026gt;% mutate(daily_cases = replace_na(daily_cases, 0)) transpo \u0026lt;- c(unique(data$transportation_type)) vec_brks \u0026lt;- c(-50, 0, 50) vec_labs \u0026lt;- vec_brks + 100 start_date \u0026lt;- sort(data$date)[1] end_date \u0026lt;- sort(desc(data$date))[1] Creating a Shiny application requires two main components, the ui componant, which is where the application creator can both tweak the layout of the application, as well as create interactive elements where the user can select from a number of options. For example, dateRangeInput() creates a widget where the user can enter a range of dates. The creator can select what the possible range can be, eliminate possibility for invalid date selections. There are many different input functions, and the elements can be arranged in many configurations in order to get the app looking just right! It’s a wonderland (and/or a real time-sink) for people like me who get endless satisfaction from minor nudges and adjustments to get things looking just right. :D\nui \u0026lt;- fluidPage( titlePanel(\u0026quot;Apple U.S. Mobility Dataset during COVID-19 Crisis\u0026quot;), fluidRow( column(5, h3(\u0026quot;Please begin by selecting your desired date range: \u0026quot;)), column(3, dateRangeInput(\u0026#39;dateRange\u0026#39;, label = \u0026#39;\u0026#39;, format=\u0026#39;mm-dd-yyyy\u0026#39;, separator=\u0026#39; to \u0026#39;, start = \u0026#39;2020-01-13\u0026#39;, end = \u0026#39;2020-05-13\u0026#39;, min = \u0026#39;2020-01-13\u0026#39;, max = \u0026#39;2020-05-13\u0026#39;)), column(4, h5(\u0026quot;Upper plot displays the daily increase in COVID-19 cases for selected location. Lower plot shows corresponding Apple Maps\u0026#39; mobility data, in terms of trends in driving since mid-January 2020 (dark green indicates a relative increase, yellow indicates a relative decrease). Did less driving correspond to \\\u0026quot;flattening the curve\\\u0026quot;? We can find out!\u0026quot;)) ), hr(), fluidRow( column(4, plotOutput(\u0026quot;plot1\u0026quot;)), column(4, plotOutput(\u0026quot;plot2\u0026quot;)), column(4, plotOutput(\u0026quot;plot3\u0026quot;)) ), fluidRow( column(3, offset = 1, selectInput(\u0026quot;loc1\u0026quot;, label=\u0026quot;Location 1\u0026quot;, multiple=FALSE, locations, width=\u0026#39;70%\u0026#39;, size=5, selectize=FALSE)), column(3, offset = 1, selectInput(\u0026quot;loc2\u0026quot;, label=\u0026quot;Location 2\u0026quot;, multiple=FALSE, locations, width=\u0026#39;70%\u0026#39;, size=5, selectize=FALSE)), column(3, offset = 1, selectInput(\u0026quot;loc3\u0026quot;, label=\u0026quot;Location 3\u0026quot;, multiple=FALSE, locations, width=\u0026#39;70%\u0026#39;, size=5, selectize=FALSE)), ), h5(\u0026quot;Data from Kieran Healy\u0026#39;s covdata package: https://kjhealy.github.io/covdata/. Bottom plots *very heavily* inspired by apple_mobility dataset vignette!\u0026quot;) ) The second main component is the server section. This is where the dynamic outputs such as plots, text, and other elements, are created and updated, and then can be placed via the ui section. In this case, we have six plots (three sets of two) which use input from the selection widgets in the section above to dynamically change and reflect the subset of the data the user would like to see.\nserver \u0026lt;- function(input, output, session) { output$plot1 \u0026lt;- renderPlot({ case_plot1 \u0026lt;- data %\u0026gt;% filter(state == input$loc1, #transportation_type %in% transpo_filter(), date \u0026gt;= input$dateRange[1] \u0026amp; date \u0026lt;= input$dateRange[2]) %\u0026gt;% ggplot(mapping=aes(x=date, y=daily_cases)) + geom_line() + scale_y_log10(limits=c(1, 3000)) + theme(legend.position = \u0026quot;none\u0026quot;) + xlab(\u0026quot;\u0026quot;) + ylab(\u0026quot;Daily Case\\nIncrease\u0026quot;) mobi_plot1 \u0026lt;- data %\u0026gt;% filter(state == input$loc1, #transportation_type %in% transpo_filter(), date \u0026gt;= input$dateRange[1] \u0026amp; date \u0026lt;= input$dateRange[2]) %\u0026gt;% mutate(over_under = index \u0026lt; 100, index = index - 100) %\u0026gt;% ggplot(mapping=aes(x=date, y=index, fill=over_under, col=over_under)) + geom_col() + scale_color_manual(values = c(\u0026#39;#004D40\u0026#39;, \u0026#39;#FFC107\u0026#39;)) + scale_fill_manual(values = c(\u0026#39;#004D40\u0026#39;, \u0026#39;#FFC107\u0026#39;)) + theme(legend.position = \u0026quot;none\u0026quot;) + scale_y_continuous(limits = c(-150, 150)) + geom_hline(yintercept = 0, color = \u0026quot;gray40\u0026quot;) + xlab(\u0026quot;Date\u0026quot;) + ylab(\u0026quot;Mobility Index\u0026quot;) ggarrange(case_plot1, mobi_plot1, heights = c(0.8, 2), ncol = 1, nrow = 2, align = \u0026#39;v\u0026#39;, legend = NULL) }) output$plot2 \u0026lt;- renderPlot({ case_plot2 \u0026lt;- data %\u0026gt;% filter(state == input$loc2, #transportation_type %in% transpo_filter(), date \u0026gt;= input$dateRange[1] \u0026amp; date \u0026lt;= input$dateRange[2]) %\u0026gt;% ggplot(mapping=aes(x=date, y=daily_cases)) + geom_line() + scale_y_log10(limits=c(1, 3000)) + theme(legend.position = \u0026quot;none\u0026quot;) + xlab(\u0026quot;\u0026quot;) + ylab(\u0026quot;Daily Case\\nIncrease\u0026quot;) mobi_plot2 \u0026lt;- data %\u0026gt;% filter(state == input$loc2, #transportation_type %in% transpo_filter(), date \u0026gt;= input$dateRange[1] \u0026amp; date \u0026lt;= input$dateRange[2]) %\u0026gt;% mutate(over_under = index \u0026lt; 100, index = index - 100) %\u0026gt;% ggplot(mapping=aes(x=date, y=index, fill=over_under, col=over_under)) + geom_col() + theme(legend.position = \u0026quot;none\u0026quot;) + scale_y_continuous(limits = c(-150, 150)) + scale_color_manual(values = c(\u0026#39;#004D40\u0026#39;, \u0026#39;#FFC107\u0026#39;)) + scale_fill_manual(values = c(\u0026#39;#004D40\u0026#39;, \u0026#39;#FFC107\u0026#39;)) + geom_hline(yintercept = 0, color = \u0026quot;gray40\u0026quot;) + xlab(\u0026quot;Date\u0026quot;) + ylab(\u0026quot;Mobility Index\u0026quot;) ggarrange(case_plot2, mobi_plot2, heights = c(0.8, 2), ncol = 1, nrow = 2, align = \u0026#39;v\u0026#39;, legend = NULL) }) output$plot3 \u0026lt;- renderPlot({ case_plot3 \u0026lt;- data %\u0026gt;% filter(state == input$loc3, #transportation_type %in% transpo_filter(), date \u0026gt;= input$dateRange[1] \u0026amp; date \u0026lt;= input$dateRange[2]) %\u0026gt;% ggplot(mapping=aes(x=date, y=daily_cases)) + theme(legend.position = \u0026quot;none\u0026quot;) + scale_y_log10(limits=c(1, 3000)) + geom_line() + xlab(\u0026quot;\u0026quot;) + ylab(\u0026quot;Daily Case\\nIncrease\u0026quot;) mobi_plot3 \u0026lt;- data %\u0026gt;% filter(state == input$loc3, #transportation_type %in% transpo_filter(), date \u0026gt;= input$dateRange[1] \u0026amp; date \u0026lt;= input$dateRange[2]) %\u0026gt;% mutate(over_under = index \u0026lt; 100, index = index - 100) %\u0026gt;% ggplot(mapping=aes(x=date, y=index, fill=over_under, col=over_under)) + geom_col() + theme(legend.position = \u0026quot;none\u0026quot;) + scale_color_manual(values = c(\u0026#39;#004D40\u0026#39;, \u0026#39;#FFC107\u0026#39;)) + scale_fill_manual(values = c(\u0026#39;#004D40\u0026#39;, \u0026#39;#FFC107\u0026#39;)) + scale_y_continuous(limits = c(-150, 150)) + geom_hline(yintercept = 0, color = \u0026quot;gray40\u0026quot;) + xlab(\u0026quot;Date\u0026quot;) + ylab(\u0026quot;Mobility Index\u0026quot;) ggarrange(case_plot3, mobi_plot3, heights = c(0.8, 2), ncol = 1, nrow = 2, align = \u0026#39;v\u0026#39;, legend = NULL) }) } shinyApp(ui = ui, server = server) I did not go into much depth explaining the ins-and-outs of creating a Shiny app, but hopefully this gives a quick taste of what can be done with the library, and inspires you to make a Shiny app of your own! More information on how to use Shiny can be found here: https://shiny.rstudio.com/tutorial/, and in many places on the web.\n ","date":1591574400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591574400,"objectID":"9376db7896385b6e416fd1209fd73c76","permalink":"https://vigilant-golick-64a677.netlify.app/post/covid-shiny/","publishdate":"2020-06-08T00:00:00Z","relpermalink":"/post/covid-shiny/","section":"post","summary":"For this post, I want to showcase my first interactive Shiny app, both the final product, and below it, the code used to generate the application. Although yes, this does use more COVID data, it was a very nice exploration of how to go about using Shiny, and I must say, after working with it, I think it’s a tool that I will start using often to explore large datasets!","tags":null,"title":"Exploring COVID-19 Data with Shiny!","type":"post"},{"authors":null,"categories":null,"content":"A Population Pyramid, also known as an Age and Sex Pyramid is a histogram-like visualization often used to provide a succinct, elegant summary of differences in distribution of groups within a population. The population is broken up by a two-level factor variable, with one on each side of the visualization, and then the data is binned based on a continuous variable. Although population pyramids typically use a factor variable of sex (male and female), and a continuous variable of age, and are often used to convey such information as a country’s fertility rate, the visualization can be generalized to other situations, in which it may be referred to as simply a “dual-sided histogram”. The type of visualization is a handy way to enhance a typical histogram by splitting it into two factor variables in order to facilitate comparison across groups within a population, while still being able to make observations about the population as a whole.\nHow to Read a Population Pyramid Visualization There are several useful takeaways that can be gleaned quickly and easily using a population pyramid:\n  How the overall distribution changes on the basis of age: To get a sense of the age distribution for the overall population, one can simply examine the shape of the plot/pyramid, focusing on how width changes from top to bottom. The wider the plot at any particular height, the more individuals in the age group corresponding to that position on the y-axis contribute to the overall population. So, if the “base”/bottom is wide compared to the rest of the plot, giving it a “pyramid”-like shape, the population is comprised of mostly younger individuals. However, if the overall “pyramid” is more rectangular, the age distribution is balanced. An upside-down pyramid would indicate a generally older population, and a “bulge” could indicate something like a baby boom around that particular age bracket’s birth years.\n  How the overall distribution differs based on sex: This is a fairly simple piece of information to glean from this type of plot – if the pyramid is heavier on one side than the other, then the population is skewed more heavily toward one particular sex than the other.\n  How the sex distribution changes as a function of age: We also can take into account both of the variables above and determine whether the sex distribution differs based on the age of that segment of the population. It’s difficult to think of an example that is not tragic, but, say, a plot of the demographics of the U.S. shortly after World War II may have more females than males in the age bracket 18-25 years old, but would likely be balanced in age brackets younger and older. In this case, the pyramid would be vertically asymmetric, with a “notch” on the male side at that age bracket. Examining the plot for these notches is a quick, simple way to determine whether the sex distribution differs for a particular age group.\n  Finally, in traditional population pyramids which depict age/sex distribution in a particular region, there are three shapes so commonly seen that they are given specific labels: expanding, contracting, and stationary, as shown below (graphic, as well as paraphrased information on each shape from a paper by Daniel Staetsky, full citation can be found in final section):\nA very triangular shape, with many more young representatives than older, as in the expanding pyramid, is indicative of a population that is growing, along with high fertility/mortality rates. The contracting shape, where the pyramid is pinched at the base is indicative of low fertility/mortality rates, corresponding to a population with few young people, relative to the rest of the group. Finally, the stationary pyramid, which has a columnal shape, tends to correspond to stable populations, with balanced, low fertility and mortality rates.\nDisclosure: Given the wide spectrum of gender identities present in modern society, I can absolutely understand how some may object to the binary nature of the population pyramid. Although I, and most who employ this type of visualization, specify the binary factor as biological “sex”, not gender, issues still remain. After a quick search, it doesn’t look like many have addressed this issue currently, but I would not be surprised to see multi-way analyses in the future (population stars??)!\nData The data used to generate the examples at the top of this page comes from the United States Consumer Product Safety Commission’s National Electronic Injury Surveillance System dataset, which can be found at the following link: https://www.cpsc.gov/Research--Statistics/NEISS-Injury-Data . This dataset is quite rich, containing data gathered from a large number of emergency departments in the US. The overall dataset contains demographic information, including sex, age, and ethnicity, as well as a number of other interesting pieces of information including whether a particular product was involved in the injury (as in the left plot above, which includes all ER visits in the dataset from 2019 which involved a trampoline), and whether drugs or alcohol were involved in the injury. The dataset also includes for each datapoint/injury, a brief narrative outlining the loose details of the incident. The website contains a neat query system where the user can narrow down the dataset by filtering for year, product involved, and other data characteristics.\nFigure-Specific Details I opted to use a population pyramid for a slighly atypical analysis in the , that is, to examine the demographics of patients who visited a number of U.S. emergency rooms in 2019, using the dataset described above. I chose to narrow the dataset to two types of emergency room incidents, to depict two very different-looking population pyramids: the left plot shows the distribution of patients who visited the ER due to trampoline-related accidents, and the right plot shows the same of patients who visited the ER due to incidents involving the use of alcohol.\nI’ll use the general framework for interpreting a population pyramid described above to discuss the information I gleaned from these plots, first analyzing the plot on the left, then the plot on the right.\nTrampoline-Based Injuries As stated, this plot shows a breakdown of the age and sex characteristics of the group of individuals who visited the emergency room due to trampoline accidents in 2019. Prior to generating the plot, I hypothesized that the shape would be heavy at the base, and thinner on the top, as children are typical trampoline users, and I recall from my daredevil youth that I much preferred playing on a trampoline without a protective net. Though as an adult, I still struggle to ignore the siren song of the trampoline, I tend to be more careful than when I was a child. Stereotypes might lead some to believe that male children are more prone to taking trampoline-related risks, but I knew many a reckless young female when I was growing up, so I hypothesized a symmetric pyramid.\nIndeed, this is what the plot shows – a very heavy base, with a peak around 9-10 years old. Around the teenage years, these injuries drop off significantly, although not completely, perhaps in part due to some in the 25-40 year old age group having young children, and being tempted by their child’s trampoline. However, once we hit the mid-40’s, there are very few representatives from that cohort and older in this population. Additionally, the plot is quite symmetric – males and females are more-or-less equally represented in this population. There doesn’t appear to be an interaction of age and sex, as there are no bulges or notches present on one side but not the other.\nAccidents Involving Alcohol A slightly more sobering (sorry!) analysis is on the right – a population pyramid showing the age/sex distribution amongst ER visits resulting from alcohol-related injuries. In this case, I did hypothesize a difference between sexes, with males making up a somewhat larger proportion of the population, though still a fair few females. I also predicted a pear-shaped pyramid, with very few representatives from the 0-20 year old cohort, the bulk of patients in the 20-30 year old range, and a consistent taper down as age increased.\nI was somewhat surprised by the shape of the resulting plot. Although I’d anticipated a plot that was heavier on the male side than the female side, I hadn’t expected the difference to be so dramatic. Almost across the board, each male age cohort has about double (if not more) members than the corresponding female cohort. I was also surprised to see bimodal distributions on both sides, with a bulge from about the mid-teens through around 35, but then an even larger bulge in the older years, peaking around the early-to-mid sixties. Folks getting wild in their retirement years! Though females are represented less in the overall population distribution, these characteristics are still present in that sub-population’s distribution.\nI could see analyses like these being useful for target specific groups to recieve safety training on a particular product, deciding who to design flyers for, which, say, encourage moderation and safety when consuming alcohol, or to determine suggested age ranges for certain play equipment.\nPresentation Tips Color: Typically, this type of visualization uses color in a simple fashion, either using a uniform color and annotating each side with the appropriate label, or selecting two distinct colors to distinguish between one side and the other. Since a population pyramid generally plots the distribution of males versus females, we often see plots that select pink for the female distribution and blue for the male distribution. However, this is a bit of an anachronism in today’s society, as these colors carry the weight of long-term stereotypical gender associations. Some argue that choosing these colors allows for speedy interpretation of the figure, however, if a reader has so little time or mental energy that scanning a legend is unmanagable, then, well, perhaps they should skip looking at the figure altogether. Interestingly, it has been suggested that simply flipping the colors around can be problematic, as it can lead to confusion due to the aforementioned speedy interpretation of those particular colors in a figure.\nSo, I chose to create a graph with different colors altogether, inspired by the color choices in the Telegraph; green for males, and purple for females. A discussion of the motivation behind this choice, as well as more detailed arguments against the selection of blue/pink to distinguish male/female populations can be found at the following link: https://blog.datawrapper.de/gendercolor/ .\nAlthough some may consider it an attractive or interesting design detail to apply a color gratient based on age, this is not a common choice. Not only is it unnecessary to code this using color, since the axis makes the age range quite clear, it could also distract readers.\nFinally, avoid this color choice for this type of visualization at all costs! (But please do use this very attractive 70’s-inspired rainbow palette for your artistic projects!)\n Composition: Since these plots are fairly straight-forward, there are only a few small details to keep in mind regarding composition. The first is that even if the most populous bin in on one side is less than the most populous bin on the other, the x-axis should range from [-n, n], with n corresponding to the most populous bin overall. Although this is a small detail, this places the line dividing the sex/two-factor distributions directly in the middle of the plot, which can aid in accurate comparison of one sub-population versus the other. Also, in my opinion, it is much more visually harmonious.\nAnnotation:\nThe Population Pyramid is a useful visualization in no small part because of the rich possibilities of interpretation without the need for excessive labeling or annotation. However, if a particular feature of the shape of the plot corresponds to, say, a cultural event that is relevant to the context of the figure, it would be acceptable to add a small annotation to the plot, indicating the events related to the feature of the plot. As with all graph annotation, it is better to keep it minimal and clean. Below is an example of a well-annotated population pyramid (although perhaps with a bit much going on, I would personally keep it to one or two annotations):\n Although the annotations/labels add a fair bit of busyness to the figure, the story behind the plot is enriched with the additional details. Note that in addition to the annotations, the figure overlays the outline of a population pyramid from an earlier date on top of the more recent pyramid. This also allows additional temporal information to the figure’s story, which I find to be quite effective.\nIn contrast, here is a poorly annotated population pyramid:\n First of all…that font! But, that is not relevant to the discussion of the pyramid itself. In this case, although there is certainly information added through the annotations, the positioning and quantity of labels distracts from the overall impact of the figure. This quantity of information would be better suited to a narrative setting, alongside the figure, perhaps with numerical annotations indicating the feature of the plot that corresponds with the additional contextual information. However, the lines indicating the positions on the plat that correspond to each annotation are confusing, in that they point directly to one or the other side of the pyramid. This configuration could come across to the viewer as if only one of the sub-populations corresponds to the information in the annotation, e.g. the middle annotation on the right-hand side appears to be referring only to the female side of the pyramid, however, certainly females are not the only humans who will age!\nMethods Below is the code used to create one of the population pyramids, broken up into a chunk that shows the data wrangling process, and then one showing the plot generation, including the ggarrange() call that was used to combine the two plots.\nData Wrangling The data wrangling process was pretty straight-forward after downloading the data from the link provided in the data section, specifically downloading and working with the entire dataset from 2019. The .xlsx file consists of a row corresponding to each emergency room visit, and the columns to each piece of information related to that incident, so I simply had to narrow down the dataset to only include rows where the column alcohol_involved was equal to one. I also filtered out rows with age values higher than 100, as there were some instances where the age column contained a code that was not the actual age in years. I also filtered out rows where the patient’s sex was unknown.\nSince the dataset originally included column names with spaces, a configuration that does not play well with R code, I used the handy janitor::clean_names() function to convert the column names into R-friendly strings. Finally, I replaced the 1/2 indicators with “Male”/“Female”, primarily as a hacky way of making the plot’s legend more attractive, although this could have been done directly during the plotting phase. Finally, I narrowed the dataset down to just the sex and age columns, which is all that was needed for the population pyramids.\nalcohol_data \u0026lt;- read_excel(\u0026quot;neiss2019.xlsx\u0026quot;) %\u0026gt;% janitor::clean_names() %\u0026gt;% filter(alcohol_involved == 1, sex != 0, age \u0026lt; 100) %\u0026gt;% mutate(sex = ifelse(sex == 1, \u0026quot;Male\u0026quot;, \u0026quot;Female\u0026quot;)) %\u0026gt;% select(sex, age)  Plotting The plots I created were adapted from code a couple of handy tutorials; the first two links in the citation section below. The two plots were then set up to display side-by-side using ggarrange(). Each function call is annotated in the R chunk below:\nbooze_pyramid \u0026lt;- ggplot(data = alcohol_data, aes(x = age, fill = sex)) + # Basic ggplot call, # specifying age as the # x-values and the # fill value to be # selected based on the # sex value. geom_histogram(data = subset(alcohol_data, sex == \u0026quot;Male\u0026quot;), # Creating the histogram bins = 35, color = \u0026quot;lightgrey\u0026quot;) + # for the male data. geom_histogram(data = subset(alcohol_data, sex == \u0026quot;Female\u0026quot;),# Creating the histogram for mapping = aes(y = - ..count.. ), # the female data. Note that position = \u0026quot;identity\u0026quot;, # the count/y is mapped to bins = 35, color = \u0026quot;lightgrey\u0026quot;) + # negative values, to flip # the bars. scale_y_continuous(limits = c(-350, 350), labels = abs) + # Manually setting the axis scale_x_continuous(limits = c(0, 100)) + # ranges. coord_flip() + # Flipping the x/y axes. ggtitle(\u0026quot;Involving Alcohol-Use\u0026quot;) + # Tweaking the title and ylab(\u0026quot;Count\u0026quot;) + # other details. theme_minimal() + theme(plot.title = element_text(size = 10, hjust = 0.5)) + scale_fill_manual(values = c(\u0026quot;#80337c\u0026quot;, \u0026quot;#338057\u0026quot;))  The ggarrange() call is included below, as this is a handy function to include several individual plots in a single overall figure.\npyramid_two \u0026lt;- ggarrange(trampoline_pyramid, booze_pyramid, heights = c(2, 2), # Call to ggarrange, ncol = 2, nrow = 1, common.legend = TRUE, align = 'v', # passing in both plot # objects and setting legend = \u0026quot;right\u0026quot;) %\u0026gt;% # display params. # Adding \u0026quot;overall\u0026quot; fig # title. annotate_figure(top = text_grob(\u0026quot;Accidents Resulting in \\nEmergency Room Visits in 2019\\n \u0026quot;, face = \u0026quot;bold\u0026quot;, size = 16)) ## Warning: Removed 2 rows containing missing values (geom_bar). ## Warning: Removed 2 rows containing missing values (geom_bar). ## Warning: Removed 2 rows containing missing values (geom_bar). ## Warning: Removed 2 rows containing missing values (geom_bar). ## Warning: Removed 2 rows containing missing values (geom_bar). ## Warning: Removed 2 rows containing missing values (geom_bar).  Additional Citations Staetsky, Daniel. (2015). Strictly Orthodox Rising: what the demography of British Jews tells us about the future of the community.\nhttps://rpubs.com/walkerke/pyramids_ggplot2 https://stackoverflow.com/questions/14680075/simpler-population-pyramid-in-ggplot2 https://www.cpsc.gov/Research--Statistics/NEISS-Injury-Data https://www.whiteplainspublicschools.org/cms/lib/NY01000029/Centricity/Domain/353/Population%20Pyramids%20Geography.pdf https://populationeducation.org/what-are-different-types-population-pyramids/ https://docs.google.com/spreadsheets/d/1wZhPLMCHKJvwOkP4juclhjFgqIY8fQFMemwKL2c64vk/edit#gid=0 https://datavizcatalogue.com\n","date":1589155200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589155200,"objectID":"2226998eca0ce764fb758d1b93f61636","permalink":"https://vigilant-golick-64a677.netlify.app/post/final-viz/","publishdate":"2020-05-11T00:00:00Z","relpermalink":"/post/final-viz/","section":"post","summary":"A Population Pyramid, also known as an Age and Sex Pyramid is a histogram-like visualization often used to provide a succinct, elegant summary of differences in distribution of groups within a population.","tags":null,"title":"All About the Population Pyramid!","type":"post"},{"authors":null,"categories":null,"content":"A Population Pyramid, also known as an Age and Sex Pyramid is a histogram-like visualization often used to provide a succinct, elegant summary of differences in distribution of groups within a population. The population is broken up by a two-level factor variable, with one on each side of the visualization, and then the data is binned based on a continuous variable. Although population pyramids typically use a factor variable of sex (male and female), and a continuous variable of age, and are often used to convey such information as a country’s fertility rate, the visualization can be generalized to other situations, in which it may be referred to as simply a “dual-sided histogram”. The type of visualization is a handy way to enhance a typical histogram by splitting it into two factor variables in order to facilitate comparison across groups within a population, while still being able to make observations about the population as a whole.\nHow to Read a Population Pyramid Visualization There are several useful takeaways that can be gleaned quickly and easily using a population pyramid:\n  How the overall distribution changes on the basis of age: To get a sense of the age distribution for the overall population, one can simply examine the shape of the plot/pyramid, focusing on how width changes from top to bottom. The wider the plot at any particular height, the more individuals in the age group corresponding to that position on the y-axis contribute to the overall population. So, if the “base”/bottom is wide compared to the rest of the plot, giving it a “pyramid”-like shape, the population is comprised of mostly younger individuals. However, if the overall “pyramid” is more rectangular, the age distribution is balanced. An upside-down pyramid would indicate a generally older population, and a “bulge” could indicate something like a baby boom around that particular age bracket’s birth years.\n  How the overall distribution differs based on sex: This is a fairly simple piece of information to glean from this type of plot – if the pyramid is heavier on one side than the other, then the population is skewed more heavily toward one particular sex than the other.\n  How the sex distribution changes as a function of age: We also can take into account both of the variables above and determine whether the sex distribution differs based on the age of that segment of the population. It’s difficult to think of an example that is not tragic, but, say, a plot of the demographics of the U.S. shortly after World War II may have more females than males in the age bracket 18-25 years old, but would likely be balanced in age brackets younger and older. In this case, the pyramid would be vertically asymmetric, with a “notch” on the male side at that age bracket. Examining the plot for these notches is a quick, simple way to determine whether the sex distribution differs for a particular age group.\n  Finally, in traditional population pyramids which depict age/sex distribution in a particular region, there are three shapes so commonly seen that they are given specific labels: expanding, contracting, and stationary, as shown below (graphic, as well as paraphrased information on each shape from a paper by Daniel Staetsky, full citation can be found in final section):\nA very triangular shape, with many more young representatives than older, as in the expanding pyramid, is indicative of a population that is growing, along with high fertility/mortality rates. The contracting shape, where the pyramid is pinched at the base is indicative of low fertility/mortality rates, corresponding to a population with few young people, relative to the rest of the group. Finally, the stationary pyramid, which has a columnal shape, tends to correspond to stable populations, with balanced, low fertility and mortality rates.\nDisclosure: Given the wide spectrum of gender identities present in modern society, I can absolutely understand how some may object to the binary nature of the population pyramid. Although I, and most who employ this type of visualization, specify the binary factor as biological “sex”, not gender, issues still remain. After a quick search, it doesn’t look like many have addressed this issue currently, but I would not be surprised to see multi-way analyses in the future (population stars??)!\nData The data used to generate the examples at the top of this page comes from the United States Consumer Product Safety Commission’s National Electronic Injury Surveillance System dataset, which can be found at the following link: https://www.cpsc.gov/Research--Statistics/NEISS-Injury-Data . This dataset is quite rich, containing data gathered from a large number of emergency departments in the US. The overall dataset contains demographic information, including sex, age, and ethnicity, as well as a number of other interesting pieces of information including whether a particular product was involved in the injury (as in the left plot above, which includes all ER visits in the dataset from 2019 which involved a trampoline), and whether drugs or alcohol were involved in the injury. The dataset also includes for each datapoint/injury, a brief narrative outlining the loose details of the incident. The website contains a neat query system where the user can narrow down the dataset by filtering for year, product involved, and other data characteristics.\nFigure-Specific Details I opted to use a population pyramid for a slighly atypical analysis in the , that is, to examine the demographics of patients who visited a number of U.S. emergency rooms in 2019, using the dataset described above. I chose to narrow the dataset to two types of emergency room incidents, to depict two very different-looking population pyramids: the left plot shows the distribution of patients who visited the ER due to trampoline-related accidents, and the right plot shows the same of patients who visited the ER due to incidents involving the use of alcohol.\nI’ll use the general framework for interpreting a population pyramid described above to discuss the information I gleaned from these plots, first analyzing the plot on the left, then the plot on the right.\nTrampoline-Based Injuries As stated, this plot shows a breakdown of the age and sex characteristics of the group of individuals who visited the emergency room due to trampoline accidents in 2019. Prior to generating the plot, I hypothesized that the shape would be heavy at the base, and thinner on the top, as children are typical trampoline users, and I recall from my daredevil youth that I much preferred playing on a trampoline without a protective net. Though as an adult, I still struggle to ignore the siren song of the trampoline, I tend to be more careful than when I was a child. Stereotypes might lead some to believe that male children are more prone to taking trampoline-related risks, but I knew many a reckless young female when I was growing up, so I hypothesized a symmetric pyramid.\nIndeed, this is what the plot shows – a very heavy base, with a peak around 9-10 years old. Around the teenage years, these injuries drop off significantly, although not completely, perhaps in part due to some in the 25-40 year old age group having young children, and being tempted by their child’s trampoline. However, once we hit the mid-40’s, there are very few representatives from that cohort and older in this population. Additionally, the plot is quite symmetric – males and females are more-or-less equally represented in this population. There doesn’t appear to be an interaction of age and sex, as there are no bulges or notches present on one side but not the other.\nAccidents Involving Alcohol A slightly more sobering (sorry!) analysis is on the right – a population pyramid showing the age/sex distribution amongst ER visits resulting from alcohol-related injuries. In this case, I did hypothesize a difference between sexes, with males making up a somewhat larger proportion of the population, though still a fair few females. I also predicted a pear-shaped pyramid, with very few representatives from the 0-20 year old cohort, the bulk of patients in the 20-30 year old range, and a consistent taper down as age increased.\nI was somewhat surprised by the shape of the resulting plot. Although I’d anticipated a plot that was heavier on the male side than the female side, I hadn’t expected the difference to be so dramatic. Almost across the board, each male age cohort has about double (if not more) members than the corresponding female cohort. I was also surprised to see bimodal distributions on both sides, with a bulge from about the mid-teens through around 35, but then an even larger bulge in the older years, peaking around the early-to-mid sixties. Folks getting wild in their retirement years! Though females are represented less in the overall population distribution, these characteristics are still present in that sub-population’s distribution.\nI could see analyses like these being useful for target specific groups to recieve safety training on a particular product, deciding who to design flyers for, which, say, encourage moderation and safety when consuming alcohol, or to determine suggested age ranges for certain play equipment.\nPresentation Tips Color: Typically, this type of visualization uses color in a simple fashion, either using a uniform color and annotating each side with the appropriate label, or selecting two distinct colors to distinguish between one side and the other. Since a population pyramid generally plots the distribution of males versus females, we often see plots that select pink for the female distribution and blue for the male distribution. However, this is a bit of an anachronism in today’s society, as these colors carry the weight of long-term stereotypical gender associations. Some argue that choosing these colors allows for speedy interpretation of the figure, however, if a reader has so little time or mental energy that scanning a legend is unmanagable, then, well, perhaps they should skip looking at the figure altogether. Interestingly, it has been suggested that simply flipping the colors around can be problematic, as it can lead to confusion due to the aforementioned speedy interpretation of those particular colors in a figure.\nSo, I chose to create a graph with different colors altogether, inspired by the color choices in the Telegraph; green for males, and purple for females. A discussion of the motivation behind this choice, as well as more detailed arguments against the selection of blue/pink to distinguish male/female populations can be found at the following link: https://blog.datawrapper.de/gendercolor/ .\nAlthough some may consider it an attractive or interesting design detail to apply a color gratient based on age, this is not a common choice. Not only is it unnecessary to code this using color, since the axis makes the age range quite clear, it could also distract readers.\nFinally, avoid this color choice for this type of visualization at all costs! (But please do use this very attractive 70’s-inspired rainbow palette for your artistic projects!)\n Composition: Since these plots are fairly straight-forward, there are only a few small details to keep in mind regarding composition. The first is that even if the most populous bin in on one side is less than the most populous bin on the other, the x-axis should range from [-n, n], with n corresponding to the most populous bin overall. Although this is a small detail, this places the line dividing the sex/two-factor distributions directly in the middle of the plot, which can aid in accurate comparison of one sub-population versus the other. Also, in my opinion, it is much more visually harmonious.\nAnnotation:\nThe Population Pyramid is a useful visualization in no small part because of the rich possibilities of interpretation without the need for excessive labeling or annotation. However, if a particular feature of the shape of the plot corresponds to, say, a cultural event that is relevant to the context of the figure, it would be acceptable to add a small annotation to the plot, indicating the events related to the feature of the plot. As with all graph annotation, it is better to keep it minimal and clean. Below is an example of a well-annotated population pyramid (although perhaps with a bit much going on, I would personally keep it to one or two annotations):\n Although the annotations/labels add a fair bit of busyness to the figure, the story behind the plot is enriched with the additional details. Note that in addition to the annotations, the figure overlays the outline of a population pyramid from an earlier date on top of the more recent pyramid. This also allows additional temporal information to the figure’s story, which I find to be quite effective.\nIn contrast, here is a poorly annotated population pyramid:\n First of all…that font! But, that is not relevant to the discussion of the pyramid itself. In this case, although there is certainly information added through the annotations, the positioning and quantity of labels distracts from the overall impact of the figure. This quantity of information would be better suited to a narrative setting, alongside the figure, perhaps with numerical annotations indicating the feature of the plot that corresponds with the additional contextual information. However, the lines indicating the positions on the plat that correspond to each annotation are confusing, in that they point directly to one or the other side of the pyramid. This configuration could come across to the viewer as if only one of the sub-populations corresponds to the information in the annotation, e.g. the middle annotation on the right-hand side appears to be referring only to the female side of the pyramid, however, certainly females are not the only humans who will age!\nMethods Below is the code used to create one of the population pyramids, broken up into a chunk that shows the data wrangling process, and then one showing the plot generation, including the ggarrange() call that was used to combine the two plots.\nData Wrangling The data wrangling process was pretty straight-forward after downloading the data from the link provided in the data section, specifically downloading and working with the entire dataset from 2019. The .xlsx file consists of a row corresponding to each emergency room visit, and the columns to each piece of information related to that incident, so I simply had to narrow down the dataset to only include rows where the column alcohol_involved was equal to one. I also filtered out rows with age values higher than 100, as there were some instances where the age column contained a code that was not the actual age in years. I also filtered out rows where the patient’s sex was unknown.\nSince the dataset originally included column names with spaces, a configuration that does not play well with R code, I used the handy janitor::clean_names() function to convert the column names into R-friendly strings. Finally, I replaced the 1/2 indicators with “Male”/“Female”, primarily as a hacky way of making the plot’s legend more attractive, although this could have been done directly during the plotting phase. Finally, I narrowed the dataset down to just the sex and age columns, which is all that was needed for the population pyramids.\nalcohol_data \u0026lt;- read_excel(\u0026quot;neiss2019.xlsx\u0026quot;) %\u0026gt;% janitor::clean_names() %\u0026gt;% filter(alcohol_involved == 1, sex != 0, age \u0026lt; 100) %\u0026gt;% mutate(sex = ifelse(sex == 1, \u0026quot;Male\u0026quot;, \u0026quot;Female\u0026quot;)) %\u0026gt;% select(sex, age)  Plotting The plots I created were adapted from code a couple of handy tutorials; the first two links in the citation section below. The two plots were then set up to display side-by-side using ggarrange(). Each function call is annotated in the R chunk below:\nbooze_pyramid \u0026lt;- ggplot(data = alcohol_data, aes(x = age, fill = sex)) + # Basic ggplot call, # specifying age as the # x-values and the # fill value to be # selected based on the # sex value. geom_histogram(data = subset(alcohol_data, sex == \u0026quot;Male\u0026quot;), # Creating the histogram bins = 35, color = \u0026quot;lightgrey\u0026quot;) + # for the male data. geom_histogram(data = subset(alcohol_data, sex == \u0026quot;Female\u0026quot;),# Creating the histogram for mapping = aes(y = - ..count.. ), # the female data. Note that position = \u0026quot;identity\u0026quot;, # the count/y is mapped to bins = 35, color = \u0026quot;lightgrey\u0026quot;) + # negative values, to flip # the bars. scale_y_continuous(limits = c(-350, 350), labels = abs) + # Manually setting the axis scale_x_continuous(limits = c(0, 100)) + # ranges. coord_flip() + # Flipping the x/y axes. ggtitle(\u0026quot;Involving Alcohol-Use\u0026quot;) + # Tweaking the title and ylab(\u0026quot;Count\u0026quot;) + # other details. theme_minimal() + theme(plot.title = element_text(size = 10, hjust = 0.5)) + scale_fill_manual(values = c(\u0026quot;#80337c\u0026quot;, \u0026quot;#338057\u0026quot;))  The ggarrange() call is included below, as this is a handy function to include several individual plots in a single overall figure.\npyramid_two \u0026lt;- ggarrange(trampoline_pyramid, booze_pyramid, heights = c(2, 2), # Call to ggarrange, ncol = 2, nrow = 1, common.legend = TRUE, align = 'v', # passing in both plot # objects and setting legend = \u0026quot;right\u0026quot;) %\u0026gt;% # display params. # Adding \u0026quot;overall\u0026quot; fig # title. annotate_figure(top = text_grob(\u0026quot;Accidents Resulting in \\nEmergency Room Visits in 2019\\n \u0026quot;, face = \u0026quot;bold\u0026quot;, size = 16)) ## Warning: Removed 2 rows containing missing values (geom_bar). ## Warning: Removed 2 rows containing missing values (geom_bar). ## Warning: Removed 2 rows containing missing values (geom_bar). ## Warning: Removed 2 rows containing missing values (geom_bar). ## Warning: Removed 2 rows containing missing values (geom_bar). ## Warning: Removed 2 rows containing missing values (geom_bar).  Additional Citations Staetsky, Daniel. (2015). Strictly Orthodox Rising: what the demography of British Jews tells us about the future of the community.\nhttps://rpubs.com/walkerke/pyramids_ggplot2 https://stackoverflow.com/questions/14680075/simpler-population-pyramid-in-ggplot2 https://www.cpsc.gov/Research--Statistics/NEISS-Injury-Data https://www.whiteplainspublicschools.org/cms/lib/NY01000029/Centricity/Domain/353/Population%20Pyramids%20Geography.pdf https://populationeducation.org/what-are-different-types-population-pyramids/ https://docs.google.com/spreadsheets/d/1wZhPLMCHKJvwOkP4juclhjFgqIY8fQFMemwKL2c64vk/edit#gid=0 https://datavizcatalogue.com\n","date":1589155200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589155200,"objectID":"e52be429656cfaae17b74ed341e1271c","permalink":"https://vigilant-golick-64a677.netlify.app/post/population-pyramid/","publishdate":"2020-05-11T00:00:00Z","relpermalink":"/post/population-pyramid/","section":"post","summary":"A Population Pyramid, also known as an Age and Sex Pyramid is a histogram-like visualization often used to provide a succinct, elegant summary of differences in distribution of groups within a population.","tags":null,"title":"All About the Population Pyramid!","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Academic  Academic | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click  PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions?  Ask\n Documentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://vigilant-golick-64a677.netlify.app/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://vigilant-golick-64a677.netlify.app/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://vigilant-golick-64a677.netlify.app/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"}]